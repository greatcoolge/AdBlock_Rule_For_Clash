name: Delete Failed Workflows

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  delete-failed-workflows:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install requests package
      run: pip install requests

    - name: Run Python script to delete failed workflows
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python - <<EOF
        import requests
        import os
        import json

        BASE_URL = "https://api.github.com"
        REPO = "REIJI007/AdBlock_Rule_For_Clash"
        TOKEN = os.getenv('GITHUB_TOKEN')

        headers = {
            "Authorization": f"Bearer {TOKEN}",
            "Accept": "application/vnd.github.v3+json"
        }

        def get_all_workflows():
            url = f"{BASE_URL}/repos/{REPO}/actions/runs"
            all_workflows = []
            while url:
                response = requests.get(url, headers=headers)
                if response.status_code == 200:
                    data = response.json()
                    all_workflows.extend(data.get('workflow_runs', []))
                    url = data.get('next')  # Handle pagination if needed
                else:
                    print(f"Failed to fetch workflows: {response.status_code} - {response.text}")
                    url = None
            return all_workflows

        def get_failed_workflows():
            workflows = get_all_workflows()
            print(f"Total workflows fetched: {len(workflows)}")
            print(f"Workflow data: {json.dumps(workflows, indent=2)}")
            
            failed_workflows = [wf for wf in workflows if wf.get('conclusion') == 'failure']
            return failed_workflows

        def delete_workflow(run_id):
            url = f"{BASE_URL}/repos/{REPO}/actions/runs/{run_id}"
            response = requests.delete(url, headers=headers)
            if response.status_code == 204:
                print(f"Successfully deleted workflow run {run_id}")
            else:
                print(f"Failed to delete workflow run {run_id}: {response.status_code} - {response.text}")

        failed_workflows = get_failed_workflows()

        if not failed_workflows:
            print("No failed workflows found.")
        else:
            for workflow in failed_workflows:
                print(f"Deleting workflow run {workflow['id']} (name: {workflow['name']})")
                delete_workflow(workflow['id'])
        EOF
